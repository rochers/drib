#!/usr/bin/perl
#
#  drib
# =================================
#  (c) Copyright Travis Kuhl 2009-10
#  
#
# This is free software. You may redistribute copies of it under the terms of
# the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
# There is NO WARRANTY, to the extent permitted by law.
#

# our package
package Drib;

# get opts
use File::Spec::Functions qw(rel2abs updir);
use Getopt::Lucid qw( :all );
use JSON;
use Digest::MD5 qw(md5_hex);
use POSIX;
use Data::Dumper;
use FindBin;

# version
our $VERSION = "0.1";

# lib
BEGIN { 
	use FindBin qw($Bin);
	use lib "$Bin/../lib";
	$SIG{'__WARN__'} = sub { warn $ _[0] if $DOWARN } 
}

# tmp and var
our $TMP = "/tmp/drib";
our $VAR = "/var/drib";


# drib packages
use Drib::Utils;
use Drib::External;
use Drib::Db;
use Drib::Remote;

# make me a drib
our $Drib = new Drib();

##
## @brief create a new instance
##
sub new {

	# get 
	my($ref) = @_;

	# define myself... i feel fat
	my $self = {
		'modules'		=> {},									# refs to modules
		'commands'		=> {},									# list of modules and their options
		'parsers'		=> {},									# list of available package file parsers
		'packages' 		=> {},									# ref to packages db
		'tmp'			=> "",									# our tmp director
		'var'			=> "",									# var folder
		'remote'		=> "Drib::Remote",						# name of remote handler
		'download-src'	=> "http://drib-pdm.org/download/%s"	# where to get the current src
	};
	
	# bless and return me
	bless($self);		
				
	# var direcotry
	$self->{var} = rel2abs($VAR);
	
	# load our dbs
	$self->{packages}   = new Drib::Db('packges',$self->{var});
	
	# tmp 
	$self->{tmp} = $TMP."/".rand_str(6);
	
		# create our tmp director
		mkdir($self->{tmp});			
	
	# load our modules
	$self->loadModules();
	
	# load our paresers 
	$self->loadParsers();			
	
	# exec
	$self->run();
		
	# self
 	return $self;

}


##
## @brief cleanup stuff when we end
##
sub DESTROY {
	
	# who am i
	my $self = shift;
	
	# remove our tmp director
	`rm -rf $self->{tmp}`;
	
}


##
## @brief run the routing and execute the 
##			proper functions
##
sub run {

	# who am i
	my $self = shift;		
	
	# args
	my @_argv = (@ARGV);
	
	# get cmd
	my $cmd = shift @_argv;	
	
	# args
	$self->setArgs([@_argv]);
	
	# save the cmd
	$self->{cmd} = $cmd;
	
	# see the cmd exists
	if ( exists $self->{commands}->{$cmd} ) {
		
		# not help need root
		if ( $> != 0 ) {
		    fail("You must run as root.");
		}
		
		# c 
		my $c = $self->{commands}->{$cmd};
		
		# options
		my $o = $opt = Getopt::Lucid->getopt(\@{$c->{options}});	
		
		# run it
		my $resp = $self->{modules}->{$c->{module}}->run($c->{name}, {$o->options});
		
		# print the message
		msg($resp->{message},$resp->{code});
		
	}
	else {

		my @spec = (
			Switch("version|v"),
			Switch("check-install"),
			Param("bin")
		);

		# options
		my $opts = Getopt::Lucid->getopt(\@spec);

		# version 
		if ( $opts->get_version ) {
			print "drib $VERSION\n"; exit(1);
		}
		
		# check install stuff
		elsif ( $opts->get_check_install ) {

			if ( -e $TMP && -e $VAR  ) {
				print "No Errors. Good to install!\n"; exit(1);
			}
			else {			
				print "ERROR! Missing a folder we need.\n"; exit(1);			
			}
			
		}
		
		# show help
		else {		
			$self->help();
		}
	
	}

}


##
## @brief set the args property
##
sub setArgs {
	
	# self
	my ($self, $args) = @_;
	
	# clean
	my @clean = ();
	
	# loop
	foreach my $arg ( @{$args} ) {	
		unless ( substr($arg,0,1) eq '-' || length $arg == 1 ) {
			push(@clean, $arg);
		}
	}

	# set htem
	$self->{args} = [@clean];

}

##
## @brief help messaging
##
sub help {

#msg	
my $msg = qq|drib $VERSION
Copyright (c) Travis Kuhl 2009-10\

This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.|;

# msg
msg($msg);

}


##
## @brief load all available modules
##
sub loadModules {

	# who am i
	my $self = shift;

	# open the cmds directory and 
	# start loading me some commands
	my %modules = (
		'Create'	=> "Drib::Cmd::Create",
		'Build'		=> "Drib::Cmd::Build",
		'Config'	=> "Drib::Cmd::Config",
		'Dist'		=> "Drib::Cmd::Dist",
		'Install'	=> "Drib::Cmd::Install",
		'Setting'	=> "Drib::Cmd::Setting",
		'Cron'		=> "Drib::Cmd::Cron",
		'Command'	=> "Drib::Cmd::Command",
		"Deply"		=> "Drib::Cmd::Deploy"
	);
	
	
	# loop through and get each ones configs
	foreach my $mod ( keys %modules ) {
		
		# include module
		$self->includeModule($modules{$mod});
	
		# new
		my $m = $modules{$mod}->new($self);
	
		# get their commands
		foreach my $cmd ( @{$m->{commands}} ) {
			
			# mod
			$cmd->{module} = $mod;
			
			# alias
			my @alias = @{$cmd->{alias}};
			
			# push name to aliast
			push(@alias, $cmd->{name});
			
			# set it 
			foreach my $a ( @alias ) {										
				$self->{commands}->{$a} = $cmd;
			}
						
		}
	
		# save the module
		$self->{modules}->{$mod} = $m;
	
	}

}


##
## @brief load a module file from a mod name
##
## @param $name module name
##
sub includeModule {

	# get
	my ($self, $name) = @_;

	# slashes
	$name =~ s/::/\//g; 
	
	# require
	require $name.".pm";

}


##
## @brief load all available parsers
##
sub loadParsers {

	# who am i
	my $self = shift;

	# out of the box parsers
	$self->{parsers} = {
		'dpf'	=> "Drib::Parsers::Text",	# drib package file
		'dppf'	=> "Drib::Parsers::Perl",	# drib perl package file
		'djpf'	=> "Drib::Parsers::Json",	# drib json package file
		'pkg'	=> "Drib::Parsers::Perl"	# for backwards compatability
	};
	
}


##
## @brief open given file and parse contents
##
## @param $self	ref to self
## @param $file file name to parse
##
sub parsePackageFile {
	
	# get self and package
	my ($self, $file_name, $file, $config) = @_;
	
	# parser
	my @parts = split(/\./,$file_name);

	# get the exension
	my $ext = pop(@parts);
	
	# conifgs
	my $drib_config = $self->{modules}->{Config}->all();
	
	# add our global config
	foreach my $key ( keys %{$drib_config} ) {
	
		# the name
		my $name = "drib.$key";
		
		# clean it
		$name =~ s/[^a-z\.]+/\./gi;
	
		# reset in config
		$config->{$name} = $drib_config->{$key};
		
	}

	# does this exist in the parsers array
	if ( exists $self->{parsers}->{$ext} ) {
	
		# parse
		my $parse = $self->{parsers}->{$ext};

		# file 
		my $pf = $parse;
		   $pf =~ s/\:\:/\//g;
		
		# require
		require $pf.".pm";
		
		# parse
		return $parse->parse($file, $config);
		
	}
	else {
		return 0;
	}

}


##
## @brief unpackage a tared package file
##
## @param $tar tared package file
##
sub unpackPackageFile {

	# get the tar
	my ($self, $tar) = @_;

	# make a tmp dir
	my $tdir = $self->{tmp} . "/" . rand_str(10);

	# make it 
	mkdir($tdir);

	# save the file to tdir 
	file_put($tdir."/pkg",$tar);

	# now move into the tmp dir 
	chdir $tdir;

	# untar the file
	`sudo tar -xzf pkg`;

	# remove pkg
	`rm pkg`;
	
	# check for manifest
	unless ( -e $tdir."/.manifest" ) {
		return {
			'code' => 404,
			"message" => "No manifest in package file"
		};
	}
	else {
		return {
			'code' => 200,
			'tmp' => "$tdir",
			'manifest' => from_json( file_get($tdir.'/.manifest') )
		};
	}
	
}


##
## @brief parse a given string for package name and
##			other info
##
## @param $name package name string
##
sub parsePackageName {

    # get the raw package name
    my ($self, $name) = @_;

    # first explode for version
    ($part,$version) = split(/-/,$name);

    # now explode for the project and name
    ($project,$pkg) = split(/\//,$part);

    # if no pkg, it must not have a project
    if ( !$pkg ) {
        $pkg = $project;
        $project = 'default';
    }
    
    # give back an object
    return { 
    	'full' => "$project/$pkg-$version", 
    	'name' => $pkg, 
    	'project' => $project, 
    	'version' => $version, 
    	'pid' => $self->getPid($project,$pkg) 
    };

}


##
## @brief create a package unque package id
##
## @param $project name of project
## @param $package name of package
##
sub getPid {

    # project
    my ($self, $project, $name) = @_;
    
    	# no project or name
    	unless ( $project ne "" && $name ne "" ) {
    		return 0;
    	}
    
    # give back the hash
    return  md5_hex($project."-".$name);

}