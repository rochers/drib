#!/usr/bin/perl
#
#  drib
# =================================
#  (c) Copyright Travis Kuhl 2009-10
#  
#
# This is free software. You may redistribute copies of it under the terms of
# the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
# There is NO WARRANTY, to the extent permitted by law.
#

# our package
package Drib;

# version
our $VERSION = "1.0";


# use packages
use Getopt::Lucid qw( :all );
use Data::Dumper;
use File::Basename;
use File::Find;
use POSIX;
use Digest::MD5 qw(md5_hex);
use Crypt::CBC;
use JSON;

# lib
use lib "../lib";

# drib packages
use Drib::Utils;
use Drib::External;
use Drib::Db;
use Drib::Host;

# make me a drib
our $Drib = new Drib();

##
## @brief create a new instance
##
sub new {

	# get 
	my($ref) = @_;

	# get myself
	my $self = {
		'modules'	=> {},			# refs to modules
		'commands'	=> {},			# list of modules and their options
		'parsers'	=> {},			# list of available package file parsers
		'config'	=> {},			# ref to config db
		'packages' 	=> {},			# ref to packages db
		'settings' 	=> {},			# ref to settings db
		'crons' 	=> {},			# ref to crons db
		'tmp'		=> ""			# our tmp director
	};
	
	# bless and return me
	bless($self);	
	
	# var direcotry
	my $var = "../test/var/";
	
	# load our dbs
    $self->{config}     = new Drib::Db('config',$var);	  
	$self->{packages}   = new Drib::Db('packges',$var);
	$self->{settings}   = new Drib::Db('settings',$var);
	$self->{crons} 	  	= new Drib::Db('crons',$var);	
	
	# tmp 
	$self->{tmp} = "/tmp/drib/".rand_str(6);
	
		# create our tmp director
		mkdir($self->{tmp});	
		
	# load our modules
	$self->loadModules();
	
	# load our paresers 
	$self->loadParsers();
	
	# exec
	$self->run();
		
	# self
 	return $self;

}


##
## @brief run the routing and execute the 
##			proper functions
##
sub run {

	# who am i
	my $self = shift;
	
	# get cmd
	my $cmd = shift(@ARGV);	
	
	# see the cmd exists
	if ( exists $self->{commands}->{$cmd} ) {
		
		# c 
		my $c = $self->{commands}->{$cmd};
		
		# options
		my $o = $opt = Getopt::Lucid->getopt( \@{$c->{options}} );	
		
		# run it
		my $resp = $self->{modules}->{$c->{module}}->run({ 'options' => {$o->options}, 'args' => @ARGV });
		
		# print the message
		msg($resp->{message},$resp->{code});
		
	}
	else {

		# help
		$self->help();
	
	}

}


##
## @brief help messaging
##
sub help {

msg("drib $VERSION\nCopyright (C) Travis Kuhl 2009-10\n\nThis is free software.  You may redistribute copies of it under the terms of\nthe GNU General Public License <http://www.gnu.org/licenses/gpl.html>.\nThere is NO WARRANTY, to the extent permitted by law.");

}


##
## @brief cleanup stuff when we end
##
sub DESTROY {
	
	# who am i
	my $self = shift;
	
	# remove our tmp director
#	`rm -rf $self->{tmp}`;
	
}

##
## @brief load all available modules
##
sub loadModules {

	# who am i
	my $self = shift;

	# open the cmds directory and 
	# start loading me some commands
	my %modules = (
		'Create'	=> "Drib::Cmd::Create",
#		'Build'		=> "Drib::Cmd::Build",
#		'Config'	=> "Drib::Cmd::Config",
#		'Dist'		=> "Drib::Cmd::Dist",
#		'Install'	=> "Drib::Cmd::Install",
#		'Settings'	=> "Drib::Cmd::Settings"
	);
	
	# use it
	use Drib::Cmd::Create;
	
	# loop through and get each ones configs
	foreach my $mod ( keys %modules ) {
	
		# new
		my $m = $modules{$mod}->new($self);

	
		# get their commands
		foreach my $cmd ( @{$m->{commands}} ) {
			
			# mod
			$cmd->{module} = $mod;
			
			# alias
			my @alias = @{$cmd->{alias}};
			
			# push name to aliast
			push(@alias,$cmd->{name});
			
			# set it 
			foreach my $a ( @alias ) {										
				$self->{commands}->{$a} = $cmd;
			}
			
			
		}
	
		# save the module
		$self->{modules}->{$mod} = $m;
	
	}

}

##
## @brief load all available parsers
##
sub loadParsers {

	# who am i
	my $self = shift;

	# out of the box parsers
	$self->{parsers} = {
		'dpf'	=> "Drib::Parsers::Text",	# drib package file
		'dppf'	=> "Drib::Parsers::Perl",	# drib perl package file
		'djpf'	=> "Drib::Parsers::Json",	# drib json package file
		'pkg'	=> "Drib::Parsers::Perl"		# for backwards compatability
	};
	
}

##
## @brief open given file and parse contents
##
## @param $self	ref to self
## @param $file file name to parse
##
sub parsePackageFile {
	
	# get self and package
	my ($self, $file_name, $file) = @_;
	
	# parser
	my @parts = split(/\./,$file_name);

	# get the exension
	my $ext = pop(@parts);

	# does this exist in the parsers array
	if ( exists $self->{parsers}->{$ext} ) {
	
		# parse
		my $parse = $self->{parsers}->{$ext};

		# file 
		my $pf = $parse;
		   $pf =~ s/\:\:/\//g;
		
		# require
		require $pf.".pm";
		
		# parse
		return $parse->parse( $file );
		
	}
	else {
		return 0;
	}

}
